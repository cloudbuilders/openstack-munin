#!/usr/bin/env python
#
# Plugin to monitor status of Floating IPs in Nova
#
# To monitor a floating ips, link floating_ips to this file.
# E.g.
#    ln -s /usr/share/munin/plugins/nova_floating_ips /etc/munin/plugins/nova_floating_ips
#
# Needs following minimal configuration in plugin-conf.d/nova:
#   [nova_*]
#   user nova
#
# Magic markers
#%# capabilities=autoconf
#%# family=nova

import sys
import subprocess

states = ['total', 'allocated', 'associated']

subprocess.Popen(["touch", "/tmp/foobar"], stdout=subprocess.PIPE).communicate()[0]

def print_config():
    global states
    print 'graph_title Nova Floating IPs'
    print 'graph_vlabel %'
    print 'graph_args --base 1000 --lower-limit 0'
    print 'graph_category nova'
    print 'graph_scale no'
    print 'graph_info This graph shows the number of Floating IPs in Nova and their status'
    for state in states:
        print '%s.label %s' % (state, state)
        print '%s.draw LINE2' % state
        print '%s.info %s IPs' % (state, state)

def get_status():
    status = {}
    for k in states: status[k] = 0

    output = subprocess.Popen(["nova-manage", "floating", "list"], stdout=subprocess.PIPE).communicate()[0]
    for l in output.strip().splitlines():
        ip, project, instance = l.split("\t")
        status['total'] += 1
        if project != 'None':
            status['allocated'] += 1
        if instance != 'None':
            status['associated'] += 1
    return status

def print_values():
    status = get_status()
    for (state, value) in status.iteritems():
        print "%s.value %s" % (state, value)

if __name__ == '__main__':
    if len(sys.argv) > 1:
        if sys.argv[1] == "config":
            print_config()
        elif sys.argv[1]=="autoconf" :
            print "yes"
    else:
        print_values()

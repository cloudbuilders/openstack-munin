#!/usr/bin/env python
#
# Plugin to monitor status of Floating IPs in Nova
#
# To monitor instance states, link instance_states to this file.
# E.g.
#    ln -s /usr/share/munin/plugins/nova_instance_states /etc/munin/plugins/
#
# Needs following minimal configuration in plugin-conf.d/nova:
#   [nova_*]
#   user nova
#
# Magic markers
#%# capabilities=autoconf
#%# family=nova

from nova import context
from nova import db
from nova import flags
from nova import utils
import sys


class InstanceState(object):
    instance_counts = None
    states = None

    @classmethod
    def init(cls):
        if cls.states and cls.instance_counts:
            return
        utils.default_flagfile()
        flags.FLAGS(sys.argv)
        ctxt = context.get_admin_context()
        instances = db.instance_get_all(ctxt)
        cls.instance_counts = {}
        for instance in instances:
            val = cls.instance_counts.get(instance.state_description, 0)
            cls.instance_counts[instance.state_description] = val + 1
        cls.states = cls.instance_counts.keys()

    @classmethod
    def get_states(cls):
        cls.init()
        return cls.states

    @classmethod
    def get_instance_counts(cls):
        cls.init()
        return cls.instance_counts


def print_config():
    states = InstanceState.get_states()
    print 'graph_title Nova Instance States'
    print 'graph_vlabel %'
    print 'graph_args --base 1000 --lower-limit 0'
    print 'graph_category nova'
    print 'graph_scale no'
    print 'graph_info This graph shows the number of instances by state'
    for state in states:
        print '%s.label %s' % (state, state)
        print '%s.draw LINE2' % state
        print '%s.info %s IPs' % (state, state)


def print_values():
    status = InstanceState.get_instance_counts()
    for (state, value) in status.iteritems():
        print "%s.value %s" % (state, value)


if __name__ == '__main__':
    if len(sys.argv) > 1:
        if sys.argv[1] == "config":
            print_config()
        elif sys.argv[1] == "autoconf":
            print "yes"
    else:
        print_values()
